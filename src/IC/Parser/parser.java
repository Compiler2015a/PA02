
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package IC.Parser;

import java.util.ArrayList;

import java_cup.runtime.Symbol;
import IC.DataTypes;
import IC.AST.CallStatement;
import IC.AST.Formal;
import IC.AST.Location;
import IC.AST.PrimitiveType;
import IC.AST.Statement;
import IC.AST.Type;
import IC.AST.UserType;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\011\000\002\004\007" +
    "\000\002\005\004\000\002\005\004\000\002\005\002\000" +
    "\002\011\005\000\002\012\005\000\002\012\003\000\002" +
    "\010\013\000\002\010\012\000\002\014\005\000\002\014" +
    "\002\000\002\013\004\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\005\000" +
    "\002\007\003\000\002\007\003\000\002\016\004\000\002" +
    "\016\002\000\002\015\006\000\002\015\004\000\002\015" +
    "\004\000\002\015\005\000\002\015\010\000\002\015\007" +
    "\000\002\015\004\000\002\015\004\000\002\015\005\000" +
    "\002\015\005\000\002\015\007\000\002\017\004\000\002" +
    "\017\002\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\006\000\002\030\007\000\002\030\005" +
    "\000\002\030\005\000\002\030\004\000\002\030\003\000" +
    "\002\030\005\000\002\020\003\000\002\020\003\000\002" +
    "\021\007\000\002\021\011\000\002\022\007\000\002\022" +
    "\005\000\002\022\011\000\002\022\007\000\002\023\005" +
    "\000\002\023\002\000\002\024\003\000\002\024\005\000" +
    "\002\024\006\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\026\003\000\002\026\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\006\002\ufffe\010\007\001\002\000\004\002" +
    "\001\001\002\000\004\002\246\001\002\000\006\002\ufffe" +
    "\010\007\001\002\000\004\005\010\001\002\000\006\011" +
    "\011\041\012\001\002\000\004\005\241\001\002\000\020" +
    "\005\020\012\021\013\025\014\017\015\016\016\015\042" +
    "\ufff9\001\002\000\020\005\020\012\021\013\025\014\017" +
    "\015\016\016\015\042\ufff9\001\002\000\004\042\237\001" +
    "\002\000\006\004\uffee\037\uffee\001\002\000\006\004\uffef" +
    "\037\uffef\001\002\000\006\004\ufff0\037\ufff0\001\002\000" +
    "\006\004\uffed\037\uffed\001\002\000\014\005\020\013\025" +
    "\014\017\015\016\016\015\001\002\000\006\004\220\037" +
    "\202\001\002\000\020\005\020\012\021\013\025\014\017" +
    "\015\016\016\015\042\ufff9\001\002\000\004\004\026\001" +
    "\002\000\004\004\uffeb\001\002\000\004\035\027\001\002" +
    "\000\006\007\ufff2\036\ufff2\001\002\000\006\007\031\036" +
    "\032\001\002\000\012\005\020\014\017\015\016\016\015" +
    "\001\002\000\004\041\033\001\002\000\056\004\uffe8\005" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\041\uffe8\042\uffe8\044\uffe8" +
    "\046\uffe8\001\002\000\056\004\044\005\064\014\017\015" +
    "\016\016\015\017\066\020\067\022\047\023\052\024\062" +
    "\025\065\026\056\030\057\031\036\032\070\033\046\034" +
    "\061\035\040\041\045\042\050\044\055\046\054\001\002" +
    "\000\042\037\uffda\043\uffda\045\uffda\046\uffda\047\uffda\050" +
    "\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda" +
    "\057\uffda\060\uffda\061\uffda\062\211\001\002\000\050\006" +
    "\uffb1\007\uffb1\036\uffb1\037\uffb1\040\uffb1\043\uffb1\045\uffb1" +
    "\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\001\002" +
    "\000\040\037\113\043\122\045\104\046\121\047\115\050" +
    "\116\051\107\052\123\053\110\054\105\055\112\056\124" +
    "\057\120\060\106\061\117\001\002\000\032\004\044\005" +
    "\075\025\065\026\056\030\057\031\036\032\070\033\046" +
    "\034\061\035\040\044\055\046\054\001\002\000\006\004" +
    "\201\037\202\001\002\000\050\006\uffcf\007\uffcf\036\uffcf" +
    "\037\uffcf\040\uffcf\043\uffcf\045\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf" +
    "\057\uffcf\060\uffcf\061\uffcf\001\002\000\050\006\uffd0\007" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\043\uffd0\045\uffd0\046\uffd0" +
    "\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055" +
    "\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\001\002\000\054" +
    "\006\uffc6\007\uffc6\035\174\036\uffc6\037\uffc6\040\uffc6\043" +
    "\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6" +
    "\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061" +
    "\uffc6\062\uffc6\001\002\000\056\004\uffe8\005\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\022\uffe8\023\uffe8\024" +
    "\uffe8\025\uffe8\026\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\041\uffe8\042\uffe8\044\uffe8\046\uffe8\001" +
    "\002\000\050\006\uffb3\007\uffb3\036\uffb3\037\uffb3\040\uffb3" +
    "\043\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3" +
    "\061\uffb3\001\002\000\004\035\166\001\002\000\020\005" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\042\ufff4" +
    "\001\002\000\056\004\uffe9\005\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\017\uffe9\020\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035" +
    "\uffe9\041\uffe9\042\uffe9\044\uffe9\046\uffe9\001\002\000\004" +
    "\006\165\001\002\000\032\004\044\005\075\025\065\026" +
    "\056\030\057\031\036\032\070\033\046\034\061\035\040" +
    "\044\055\046\054\001\002\000\032\004\uffb6\005\uffb6\025" +
    "\uffb6\026\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\044\uffb6\046\uffb6\001\002\000\032\004\uffb5\005" +
    "\uffb5\025\uffb5\026\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\044\uffb5\046\uffb5\001\002\000\012\005" +
    "\154\014\017\015\016\016\015\001\002\000\050\006\uffb2" +
    "\007\uffb2\036\uffb2\037\uffb2\040\uffb2\043\uffb2\045\uffb2\046" +
    "\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\001\002\000" +
    "\050\006\uffd2\007\uffd2\036\uffd2\037\uffd2\040\uffd2\043\uffd2" +
    "\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053" +
    "\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2" +
    "\001\002\000\050\006\uffb4\007\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\043\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4" +
    "\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060" +
    "\uffb4\061\uffb4\001\002\000\004\006\153\001\002\000\042" +
    "\006\152\037\uffd9\043\uffd9\045\uffd9\046\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9" +
    "\057\uffd9\060\uffd9\061\uffd9\001\002\000\010\004\uffed\037" +
    "\uffed\043\076\001\002\000\050\006\uffd8\007\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\043\uffd8\045\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8" +
    "\057\uffd8\060\uffd8\061\uffd8\001\002\000\034\004\044\005" +
    "\075\006\147\025\065\026\056\030\057\031\036\032\070" +
    "\033\046\034\061\035\040\044\055\046\054\001\002\000" +
    "\004\035\071\001\002\000\050\006\uffb0\007\uffb0\036\uffb0" +
    "\037\uffb0\040\uffb0\043\uffb0\045\uffb0\046\uffb0\047\uffb0\050" +
    "\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0" +
    "\057\uffb0\060\uffb0\061\uffb0\001\002\000\032\004\044\005" +
    "\075\025\065\026\056\030\057\031\036\032\070\033\046" +
    "\034\061\035\040\044\055\046\054\001\002\000\050\006" +
    "\uffda\007\uffda\036\uffda\037\uffda\040\uffda\043\uffda\045\uffda" +
    "\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054" +
    "\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\001\002" +
    "\000\042\036\142\037\113\043\122\045\104\046\121\047" +
    "\115\050\116\051\107\052\123\053\110\054\105\055\112" +
    "\056\124\057\120\060\106\061\117\001\002\000\050\006" +
    "\uffd9\007\uffd9\036\uffd9\037\uffd9\040\uffd9\043\uffd9\045\uffd9" +
    "\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054" +
    "\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\001\002" +
    "\000\004\043\076\001\002\000\004\004\077\001\002\000" +
    "\004\035\100\001\002\000\034\004\044\005\075\025\065" +
    "\026\056\030\057\031\036\032\070\033\046\034\061\035" +
    "\040\036\102\044\055\046\054\001\002\000\044\007\114" +
    "\036\uffc7\037\113\043\122\045\104\046\121\047\115\050" +
    "\116\051\107\052\123\053\110\054\105\055\112\056\124" +
    "\057\120\060\106\061\117\001\002\000\050\006\uffce\007" +
    "\uffce\036\uffce\037\uffce\040\uffce\043\uffce\045\uffce\046\uffce" +
    "\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055" +
    "\uffce\056\uffce\057\uffce\060\uffce\061\uffce\001\002\000\004" +
    "\036\141\001\002\000\032\004\uffc3\005\uffc3\025\uffc3\026" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\044\uffc3\046\uffc3\001\002\000\032\004\uffbc\005\uffbc\025" +
    "\uffbc\026\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc" +
    "\035\uffbc\044\uffbc\046\uffbc\001\002\000\032\004\uffb8\005" +
    "\uffb8\025\uffb8\026\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\044\uffb8\046\uffb8\001\002\000\032\004" +
    "\uffbf\005\uffbf\025\uffbf\026\uffbf\030\uffbf\031\uffbf\032\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\044\uffbf\046\uffbf\001\002\000" +
    "\032\004\uffbd\005\uffbd\025\uffbd\026\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\035\uffbd\044\uffbd\046\uffbd\001" +
    "\002\000\032\004\044\005\075\025\065\026\056\030\057" +
    "\031\036\032\070\033\046\034\061\035\040\044\055\046" +
    "\054\001\002\000\032\004\uffbb\005\uffbb\025\uffbb\026\uffbb" +
    "\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\044" +
    "\uffbb\046\uffbb\001\002\000\032\004\044\005\075\025\065" +
    "\026\056\030\057\031\036\032\070\033\046\034\061\035" +
    "\040\044\055\046\054\001\002\000\032\004\044\005\075" +
    "\025\065\026\056\030\057\031\036\032\070\033\046\034" +
    "\061\035\040\044\055\046\054\001\002\000\032\004\uffc1" +
    "\005\uffc1\025\uffc1\026\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\044\uffc1\046\uffc1\001\002\000\032" +
    "\004\uffc0\005\uffc0\025\uffc0\026\uffc0\030\uffc0\031\uffc0\032" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\044\uffc0\046\uffc0\001\002" +
    "\000\032\004\uffb7\005\uffb7\025\uffb7\026\uffb7\030\uffb7\031" +
    "\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\044\uffb7\046\uffb7" +
    "\001\002\000\032\004\uffb9\005\uffb9\025\uffb9\026\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\044\uffb9" +
    "\046\uffb9\001\002\000\032\004\uffc2\005\uffc2\025\uffc2\026" +
    "\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\044\uffc2\046\uffc2\001\002\000\006\004\125\027\126\001" +
    "\002\000\032\004\uffbe\005\uffbe\025\uffbe\026\uffbe\030\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\044\uffbe\046" +
    "\uffbe\001\002\000\032\004\uffba\005\uffba\025\uffba\026\uffba" +
    "\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\044" +
    "\uffba\046\uffba\001\002\000\054\006\uffc5\007\uffc5\035\127" +
    "\036\uffc5\037\uffc5\040\uffc5\043\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\001\002\000" +
    "\050\006\uffd5\007\uffd5\036\uffd5\037\uffd5\040\uffd5\043\uffd5" +
    "\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053" +
    "\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5" +
    "\001\002\000\034\004\044\005\075\025\065\026\056\030" +
    "\057\031\036\032\070\033\046\034\061\035\040\036\131" +
    "\044\055\046\054\001\002\000\044\007\114\036\uffc7\037" +
    "\113\043\122\045\104\046\121\047\115\050\116\051\107" +
    "\052\123\053\110\054\105\055\112\056\124\057\120\060" +
    "\106\061\117\001\002\000\050\006\uffcc\007\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\043\uffcc\045\uffcc\046\uffcc\047\uffcc\050" +
    "\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc" +
    "\057\uffcc\060\uffcc\061\uffcc\001\002\000\004\036\133\001" +
    "\002\000\050\006\uffca\007\uffca\036\uffca\037\uffca\040\uffca" +
    "\043\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052" +
    "\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca" +
    "\061\uffca\001\002\000\044\007\114\036\uffc7\037\113\043" +
    "\122\045\104\046\121\047\115\050\116\051\107\052\123" +
    "\053\110\054\105\055\112\056\124\057\120\060\106\061" +
    "\117\001\002\000\004\036\uffc8\001\002\000\042\037\113" +
    "\040\137\043\122\045\104\046\121\047\115\050\116\051" +
    "\107\052\123\053\110\054\105\055\112\056\124\057\120" +
    "\060\106\061\117\001\002\000\052\006\uffc4\007\uffc4\036" +
    "\uffc4\037\uffc4\040\uffc4\043\uffc4\045\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056" +
    "\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\001\002\000\050" +
    "\006\uffd4\007\uffd4\036\uffd4\037\113\040\uffd4\043\122\045" +
    "\104\046\121\047\115\050\116\051\107\052\123\053\110" +
    "\054\105\055\112\056\124\057\120\060\106\061\117\001" +
    "\002\000\050\006\uffcd\007\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\043\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd" +
    "\061\uffcd\001\002\000\054\004\044\005\064\014\017\015" +
    "\016\016\015\017\066\020\067\022\047\023\052\024\062" +
    "\025\065\026\056\030\057\031\036\032\070\033\046\034" +
    "\061\035\040\041\045\044\055\046\054\001\002\000\060" +
    "\004\uffdb\005\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020" +
    "\uffdb\021\145\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\041" +
    "\uffdb\042\uffdb\044\uffdb\046\uffdb\001\002\000\060\004\uffe3" +
    "\005\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\030\uffe3" +
    "\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\041\uffe3\042" +
    "\uffe3\044\uffe3\046\uffe3\001\002\000\054\004\044\005\064" +
    "\014\017\015\016\016\015\017\066\020\067\022\047\023" +
    "\052\024\062\025\065\026\056\030\057\031\036\032\070" +
    "\033\046\034\061\035\040\041\045\044\055\046\054\001" +
    "\002\000\060\004\uffdc\005\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\041\uffdc\042\uffdc\044\uffdc\046\uffdc\001\002\000" +
    "\060\004\uffe5\005\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\041\uffe5\042\uffe5\044\uffe5\046\uffe5\001\002\000\042\006" +
    "\151\037\113\043\122\045\104\046\121\047\115\050\116" +
    "\051\107\052\123\053\110\054\105\055\112\056\124\057" +
    "\120\060\106\061\117\001\002\000\060\004\uffe4\005\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\035\uffe4\041\uffe4\042\uffe4\044" +
    "\uffe4\046\uffe4\001\002\000\060\004\uffe6\005\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\041\uffe6\042\uffe6\044\uffe6\046" +
    "\uffe6\001\002\000\060\004\uffe0\005\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\035\uffe0\041\uffe0\042\uffe0\044\uffe0\046\uffe0\001" +
    "\002\000\006\035\162\037\uffed\001\002\000\004\037\156" +
    "\001\002\000\034\004\044\005\075\025\065\026\056\030" +
    "\057\031\036\032\070\033\046\034\061\035\040\040\160" +
    "\044\055\046\054\001\002\000\042\037\113\040\161\043" +
    "\122\045\104\046\121\047\115\050\116\051\107\052\123" +
    "\053\110\054\105\055\112\056\124\057\120\060\106\061" +
    "\117\001\002\000\006\004\uffec\037\uffec\001\002\000\050" +
    "\006\uffd6\007\uffd6\036\uffd6\037\uffd6\040\uffd6\043\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6" +
    "\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\001" +
    "\002\000\004\036\163\001\002\000\050\006\uffd7\007\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\043\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7" +
    "\056\uffd7\057\uffd7\060\uffd7\061\uffd7\001\002\000\050\006" +
    "\uffd3\007\uffd3\036\uffd3\037\113\040\uffd3\043\122\045\104" +
    "\046\121\047\115\050\116\051\107\052\123\053\110\054" +
    "\105\055\112\056\124\057\120\060\106\061\117\001\002" +
    "\000\060\004\uffe1\005\uffe1\014\uffe1\015\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\041\uffe1\042\uffe1\044\uffe1\046\uffe1\001\002\000\032" +
    "\004\044\005\075\025\065\026\056\030\057\031\036\032" +
    "\070\033\046\034\061\035\040\044\055\046\054\001\002" +
    "\000\042\036\170\037\113\043\122\045\104\046\121\047" +
    "\115\050\116\051\107\052\123\053\110\054\105\055\112" +
    "\056\124\057\120\060\106\061\117\001\002\000\054\004" +
    "\044\005\064\014\017\015\016\016\015\017\066\020\067" +
    "\022\047\023\052\024\062\025\065\026\056\030\057\031" +
    "\036\032\070\033\046\034\061\035\040\041\045\044\055" +
    "\046\054\001\002\000\060\004\uffe2\005\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\041\uffe2\042\uffe2\044\uffe2\046\uffe2" +
    "\001\002\000\056\004\044\005\064\014\017\015\016\016" +
    "\015\017\066\020\067\022\047\023\052\024\062\025\065" +
    "\026\056\030\057\031\036\032\070\033\046\034\061\035" +
    "\040\041\045\042\173\044\055\046\054\001\002\000\060" +
    "\004\uffdf\005\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\041" +
    "\uffdf\042\uffdf\044\uffdf\046\uffdf\001\002\000\034\004\044" +
    "\005\075\025\065\026\056\030\057\031\036\032\070\033" +
    "\046\034\061\035\040\036\176\044\055\046\054\001\002" +
    "\000\044\007\114\036\uffc7\037\113\043\122\045\104\046" +
    "\121\047\115\050\116\051\107\052\123\053\110\054\105" +
    "\055\112\056\124\057\120\060\106\061\117\001\002\000" +
    "\050\006\uffcb\007\uffcb\036\uffcb\037\uffcb\040\uffcb\043\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb" +
    "\001\002\000\004\036\200\001\002\000\050\006\uffc9\007" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\043\uffc9\045\uffc9\046\uffc9" +
    "\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055" +
    "\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\001\002\000\006" +
    "\006\203\062\204\001\002\000\004\040\160\001\002\000" +
    "\060\004\uffde\005\uffde\014\uffde\015\uffde\016\uffde\017\uffde" +
    "\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\041\uffde\042\uffde\044\uffde\046\uffde\001\002\000\032\004" +
    "\044\005\075\025\065\026\056\030\057\031\036\032\070" +
    "\033\046\034\061\035\040\044\055\046\054\001\002\000" +
    "\042\006\206\037\113\043\122\045\104\046\121\047\115" +
    "\050\116\051\107\052\123\053\110\054\105\055\112\056" +
    "\124\057\120\060\106\061\117\001\002\000\060\004\uffdd" +
    "\005\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\041\uffdd\042" +
    "\uffdd\044\uffdd\046\uffdd\001\002\000\042\036\210\037\113" +
    "\043\122\045\104\046\121\047\115\050\116\051\107\052" +
    "\123\053\110\054\105\055\112\056\124\057\120\060\106" +
    "\061\117\001\002\000\050\006\uffd1\007\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\043\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1" +
    "\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057" +
    "\uffd1\060\uffd1\061\uffd1\001\002\000\032\004\044\005\075" +
    "\025\065\026\056\030\057\031\036\032\070\033\046\034" +
    "\061\035\040\044\055\046\054\001\002\000\042\006\213" +
    "\037\113\043\122\045\104\046\121\047\115\050\116\051" +
    "\107\052\123\053\110\054\105\055\112\056\124\057\120" +
    "\060\106\061\117\001\002\000\060\004\uffe7\005\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\023\uffe7\024\uffe7\025\uffe7\026\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\033\uffe7\034\uffe7\035\uffe7\041\uffe7\042\uffe7\044\uffe7" +
    "\046\uffe7\001\002\000\006\007\ufff3\036\ufff3\001\002\000" +
    "\006\004\216\037\202\001\002\000\006\007\ufff1\036\ufff1" +
    "\001\002\000\004\042\ufffa\001\002\000\006\006\222\007" +
    "\221\001\002\000\004\004\224\001\002\000\020\005\ufff6" +
    "\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\042\ufff6\001" +
    "\002\000\020\005\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8" +
    "\016\ufff8\042\ufff8\001\002\000\006\006\222\007\221\001" +
    "\002\000\020\005\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\042\ufff7\001\002\000\006\004\uffea\037\202\001" +
    "\002\000\004\004\230\001\002\000\004\035\231\001\002" +
    "\000\006\007\ufff2\036\ufff2\001\002\000\006\007\031\036" +
    "\233\001\002\000\004\041\234\001\002\000\056\004\uffe8" +
    "\005\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\035\uffe8\041\uffe8\042\uffe8\044" +
    "\uffe8\046\uffe8\001\002\000\056\004\044\005\064\014\017" +
    "\015\016\016\015\017\066\020\067\022\047\023\052\024" +
    "\062\025\065\026\056\030\057\031\036\032\070\033\046" +
    "\034\061\035\040\041\045\042\236\044\055\046\054\001" +
    "\002\000\020\005\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\016\ufff5\042\ufff5\001\002\000\006\002\ufffc\010\ufffc\001" +
    "\002\000\004\042\ufffb\001\002\000\004\041\242\001\002" +
    "\000\020\005\020\012\021\013\025\014\017\015\016\016" +
    "\015\042\ufff9\001\002\000\004\042\244\001\002\000\006" +
    "\002\ufffd\010\ufffd\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\010\002\004\003\003\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\244\004\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\013\006\021\007\023\010\012\011\022" +
    "\001\001\000\014\005\237\006\021\007\023\010\012\011" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\225\007\226\001\001\000\002\001\001\000\014\005\216" +
    "\006\021\007\023\010\012\011\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\027" +
    "\001\001\000\002\001\001\000\006\006\214\013\213\001" +
    "\001\000\002\001\001\000\004\016\033\001\001\000\024" +
    "\006\040\015\050\020\062\021\042\022\041\024\034\026" +
    "\052\027\057\030\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\110\001\001\000\020\020\073\021" +
    "\042\022\041\024\071\026\052\027\057\030\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\020\073\021\042\022\041\024\071" +
    "\026\052\027\057\030\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\020\073\021\042\022\041\024\071\026\052\027\057\030" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\020\073\021\042\022\041\024\071\026\052\027\057\030" +
    "\072\001\001\000\002\001\001\000\004\025\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\020\073\021\042\022\041\024\071" +
    "\026\052\027\057\030\100\001\001\000\006\023\102\025" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\020\073\021\042\022\041" +
    "\024\071\026\052\027\057\030\137\001\001\000\002\001" +
    "\001\000\020\020\073\021\042\022\041\024\071\026\052" +
    "\027\057\030\135\001\001\000\020\020\073\021\042\022" +
    "\041\024\071\026\052\027\057\030\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\020\073\021\042\022\041\024\071\026\052\027\057" +
    "\030\127\001\001\000\006\023\131\025\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\134\025\110\001\001\000\002\001\001\000\004\025" +
    "\110\001\001\000\002\001\001\000\004\025\110\001\001" +
    "\000\002\001\001\000\024\006\040\015\142\020\062\021" +
    "\042\022\041\024\034\026\052\027\057\030\036\001\001" +
    "\000\004\017\143\001\001\000\002\001\001\000\024\006" +
    "\040\015\145\020\062\021\042\022\041\024\034\026\052" +
    "\027\057\030\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\020\073\021\042\022\041\024\071\026\052" +
    "\027\057\030\156\001\001\000\004\025\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\110\001\001\000\002\001\001\000" +
    "\020\020\073\021\042\022\041\024\071\026\052\027\057" +
    "\030\166\001\001\000\004\025\110\001\001\000\024\006" +
    "\040\015\170\020\062\021\042\022\041\024\034\026\052" +
    "\027\057\030\036\001\001\000\002\001\001\000\024\006" +
    "\040\015\050\020\062\021\042\022\041\024\034\026\052" +
    "\027\057\030\036\001\001\000\002\001\001\000\020\020" +
    "\073\021\042\022\041\024\071\026\052\027\057\030\174" +
    "\001\001\000\006\023\176\025\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\020\073\021" +
    "\042\022\041\024\071\026\052\027\057\030\204\001\001" +
    "\000\004\025\110\001\001\000\002\001\001\000\004\025" +
    "\110\001\001\000\002\001\001\000\020\020\073\021\042" +
    "\022\041\024\071\026\052\027\057\030\211\001\001\000" +
    "\004\025\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\234\001\001\000\024\006\040\015\050" +
    "\020\062\021\042\022\041\024\034\026\052\027\057\030" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\242\006\021\007" +
    "\023\010\012\011\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
	Symbol s = lexer.next_token();
	return new Token(s.sym, s.value, s.left, s.right);

    }


	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;
	
	private Lexer lexer;
	private int arrayDimentionCounter = 0;
	
	private String getValueFromToken(Object obj) {
		Token token = (Token)obj;
		return token.getValue().toString();
	}
	
	private int getLineFromToken(Object obj) {
		Token token = (Token)obj;
		return token.getLine();
	}
	
	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= classDecl_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // classDecl_list ::= classDecl classDecl_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("classDecl_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classDecl_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("classDecl_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classDecl ::= CLASS_KEYWORD CLASS_ID EXTENDS_KEYWORD CLASS_ID LB classLines_list RB 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("Declaration of class: " + c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // classDecl ::= CLASS_KEYWORD CLASS_ID LB classLines_list RB 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("Declaration of class: " + c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // classLines_list ::= method classLines_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("classLines_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // classLines_list ::= field classLines_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("classLines_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // classLines_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("classLines_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // field ::= type ID extra_fields 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Declaration of field: " + f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // extra_fields ::= COMMA ID extra_fields 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_fields",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // extra_fields ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_fields",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method ::= STATIC_KEYWORD method_type ID LP formal_list RP LB stmnt_list RB 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
				System.out.println("Declaration of static method: " + m);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method ::= method_type ID LP formal_list RP LB stmnt_list RB 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
				System.out.println("Declaration of virtual method: " + m);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formal_list ::= formal_list COMMA formal 
            {
              Object RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList<Formal>)fl).add((Formal)f); RESULT = fl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formal_list ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<Formal>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formal ::= type ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Formal((Type)t, id.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= INT_KEYWORD 
            {
              Object RESULT =null;
		int intKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object intKey = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimitiveType(intKey.getLine(), DataTypes.INT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= BOOLEAN_KEYWORD 
            {
              Object RESULT =null;
		int boolKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object boolKey = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimitiveType(boolKey.getLine(), DataTypes.BOOLEAN); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= STRING_KEYWORD 
            {
              Object RESULT =null;
		int strKeyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strKeyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object strKey = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimitiveType(strKey.getLine(), DataTypes.STRING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= CLASS_ID 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UserType(c.getLine(), c.getValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= type LC RC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = t.incrementDimension(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // method_type ::= VOID_KEYWORD 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimitiveType(v.getLine(), DataTypes.VOID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // method_type ::= type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmnt_list ::= stmnt_list stmnt 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 sl.add(s); RESULT = sl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmnt_list ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<Statement>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmnt ::= location ASSIGN expr SEMICOLON 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
				RESULT = new Location(l.getLine()); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmnt ::= call SEMICOLON 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new CallStatement(c);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmnt ::= RETURN_KEYWORD SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmnt ::= RETURN_KEYWORD expr SEMICOLON 
            {
              Object RESULT =null;
		
				System.out.println("Return statement, with return value");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmnt ::= IF_KEYWORD LP expr RP stmnt elseStmn 
            {
              Object RESULT =null;
		
				System.out.println("If statement");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmnt ::= WHILE_KEYWORD LP expr RP stmnt 
            {
              Object RESULT =null;
		
				System.out.println("While statement");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmnt ::= BREAK_KEYWORD SEMICOLON 
            {
              Object RESULT =null;
		
				System.out.println("Break statement");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmnt ::= CONTINUE_KEYWORD SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmnt ::= LB stmnt_list RB 
            {
              Object RESULT =null;
		
				System.out.println("Block of statements");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmnt ::= type ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmnt ::= type ID ASSIGN expr SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
				System.out.println("Declaration of local variable: " + v + ", with initial value");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // elseStmn ::= ELSE_KEYWORD stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseStmn",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // elseStmn ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseStmn",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= location 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= call 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= THIS_KEYWORD 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= NEW_KEYWORD CLASS_ID LP RP 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				System.out.println("Instantiation of class: " + c);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= NEW_KEYWORD type LC expr RC 
            {
              Integer RESULT =null;
		
				System.out.println("Array allocation");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr DOT LENGTH_KEYWORD 
            {
              Integer RESULT =null;
		
				System.out.println("Reference to array length");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr binop expr 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= unop expr 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= literal 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= LP expr RP 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // call ::= staticCall 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // call ::= virtualCall 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // staticCall ::= CLASS_ID DOT ID LP RP 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
					System.out.println("Call to static method: " + m + ", in class " + c);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("staticCall",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // staticCall ::= CLASS_ID DOT ID LP expr extra_exprs RP 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
					System.out.println("Call to static method: " + m + ", in class " + c);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("staticCall",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // virtualCall ::= expr DOT ID LP RP 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					System.out.println("Call to virtual method: " + m + ", in external scope");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("virtualCall",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // virtualCall ::= ID LP RP 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					System.out.println("Call to virtual method: " + m);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("virtualCall",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // virtualCall ::= expr DOT ID LP expr extra_exprs RP 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
					System.out.println("Call to virtual method: " + m + ", in external scope");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("virtualCall",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // virtualCall ::= ID LP expr extra_exprs RP 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
					System.out.println("Call to virtual method: " + m);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("virtualCall",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // extra_exprs ::= COMMA expr extra_exprs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_exprs",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // extra_exprs ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra_exprs",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // location ::= ID 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			 	System.out.println("Reference to variable: " + v);
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // location ::= expr DOT ID 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			 	System.out.println("Reference to variable: " + v + ", in external scope");
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // location ::= expr LC expr RC 
            {
              Object RESULT =null;
		
			 	System.out.println("Reference to array");
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // binop ::= PLUS 
            {
              Object RESULT =null;
		
				System.out.println("Mathematical binary operation: addition");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // binop ::= MINUS 
            {
              Object RESULT =null;
		
				System.out.println("Mathematical binary operation: subtraction");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // binop ::= MULT 
            {
              Object RESULT =null;
		
				System.out.println("Mathematical binary operation: multiplication");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // binop ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // binop ::= REMINDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // binop ::= SMALLER_OP 
            {
              Object RESULT =null;
		
				System.out.println("Logical binary operation: less than");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // binop ::= LARGER_OP 
            {
              Object RESULT =null;
		
				System.out.println("Logical binary operation: greater than");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // binop ::= SMALLER_EQ_OP 
            {
              Object RESULT =null;
		
				System.out.println("Logical binary operation: less than or equal to");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // binop ::= LARGER_EQ_OP 
            {
              Object RESULT =null;
		
				System.out.println("Logical binary operation: greater than or equal to");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // binop ::= EQUALS_OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // binop ::= NOT_EQUALS_OP 
            {
              Object RESULT =null;
		
				System.out.println("Logical binary operation: inequality");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // binop ::= AND_OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // binop ::= OR_OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unop ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unop ::= EXCLAMATION_MARK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // literal ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.out.println("Integer literal: " + n);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.out.println("String literal: " + s);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // literal ::= TRUE_LITERAL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.out.println("Boolean literal: " + t);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // literal ::= FALSE_LITERAL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.out.println("Boolean literal: " + t);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // literal ::= NULL_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
