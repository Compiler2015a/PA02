package IC.Parser;
import java_cup.runtime.*;
import IC.AST.*;

import java.util.ArrayList;

/* Preliminaries to set up and use the scanner.  */
init with {: scanner.init();              :};
scan with {: return scanner.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal			VOID_KEYWORD, INT_KEYWORD, BOOLEAN_KEYWORD, STRING_KEYWORD;
terminal			ID;
terminal			CLASS_KEYWORD, CLASS_ID, EXTENDS_KEYWORD, STATIC_KEYWORD;
terminal            SEMI, PLUS, MINUS, TIMES, DIVIDE, MOD;
terminal            UMINUS, LP, RP, LB, RB, LC, RC, COMMA, SEMICOLON;
terminal Integer    NUMBER;

/* Non terminals */
non terminal Type type, method_type;
non terminal Formal formal;
non terminal List<Formal> formal_list;
non terminal Method method;
non terminal List<Method> method_list;
non terminal ICClass classDecl;
non terminal Program program;
non terminal Integer    expr, term, factor;

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left UMINUS;

/* The grammar */
program ::= classDecl:c
			{: List<ICClass> cl = new ArrayList<ICClass>(c); RESULT = new Program(cl); :}
			| program:p classDecl:c
			{: p.getClasses().add(c); RESULT = p; :}
			|
			{: RESULT = new Program(new ArrayList<ICClass>(); :}
;


classDecl ::= CLASS_KEYWORD CLASS_ID:cid EXTENDS_KEYWORD CLASS_ID:cex LB method_list:ml RB
			{: RESULT = new ICClass(cid.getLine(), (String)cid.getValue() , (String)cex.getValue(), null, /* SHOULDNT BE NULL IN IC.cup */
			ml); :}
			| CLASS_KEYWORD CLASS_ID LB method_list:ml RB /*Library has no need for (field|method)* */
			{: RESULT = new ICClass(cid.getLine(), (String)cid.getValue() , null, /* SHOULDNT BE NULL IN IC.cup */
			ml); :}
; 
			
method_list ::= method:m
		{: RESULT = new ArrayList<Method>(m); :}
		| method_list:ml method:m 
		{: ml.add(m); RESULT = ml; :}
		|
		{: RESULT = new ArrayList<Method>(); :}
;	
	
method ::= STATIC_KEYWORD method_type:t ID:id LP formal_list:fl RP SEMICOLON /* LB stmnt_list RB */
			{: RESULT = new StaticMethod(t, (String)id.getValue(), fl, null); :} /* statement list not null in IC.cup */
			| method_type:t ID:id LP formal_list:fl RP SEMICOLON /* LB stmnt_list RB; */
			{: RESULT = new Method(t, (String)id.getValue(), fl, null); :} /* statement list not null in IC.cup */
;
			
method_type ::= VOID_KEYWORD:v
		{: RESULT = new PrimitiveType(v.getLine(), DataTypes.VOID); :}
		| type:t
		{: RESULT = t; :}
;
			
type ::= INT_KEYWORD:intKey
		{: RESULT = new PrimitiveType(intKey.getLine(), DataTypes.INT); :}
		| BOOLEAN_KEYWORD:boolKey
		{: RESULT = new PrimitiveType(boolKey.getLine(), DataTypes.BOOLEAN); :}
		| STRING_KEYWORD:strKey
		{: RESULT = new PrimitiveType(strKey.getLine(), DataTypes.STRING); :}
		| CLASS_ID:c
		{: RESULT = new UserType(c.getLine(), c.getValue()); :}
		| type:t LC RC
		{: RESULT = t.incrementDimension(); :}
;
	
formal_list ::= formal:f
		{: RESULT = new ArrayList<Formal>(f); :}
		| formal_list:fl COMMA formal:f
		{: fl.add(f); RESULT = fl; :}
		|
		{: RESULT = new ArrayList<Formal>(); :}
;

formal ::= type:t ID:id
		{: RESULT = new Formal(t, (String)id.getValue()); :}
;
	
/* stmnt_list ::= stmnt_list stmnt | stmnt; */
